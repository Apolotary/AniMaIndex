#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AniMaIndex.Model.LINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AniMaIndex")]
	public partial class AnimeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnime(Anime instance);
    partial void UpdateAnime(Anime instance);
    partial void DeleteAnime(Anime instance);
    partial void InsertAiredYet(AiredYet instance);
    partial void UpdateAiredYet(AiredYet instance);
    partial void DeleteAiredYet(AiredYet instance);
    partial void InsertAnimeList(AnimeList instance);
    partial void UpdateAnimeList(AnimeList instance);
    partial void DeleteAnimeList(AnimeList instance);
    partial void InsertFavAnime(FavAnime instance);
    partial void UpdateFavAnime(FavAnime instance);
    partial void DeleteFavAnime(FavAnime instance);
    partial void InsertFavManga(FavManga instance);
    partial void UpdateFavManga(FavManga instance);
    partial void DeleteFavManga(FavManga instance);
    partial void InsertFavStaff(FavStaff instance);
    partial void UpdateFavStaff(FavStaff instance);
    partial void DeleteFavStaff(FavStaff instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertManga(Manga instance);
    partial void UpdateManga(Manga instance);
    partial void DeleteManga(Manga instance);
    partial void InsertMangaList(MangaList instance);
    partial void UpdateMangaList(MangaList instance);
    partial void DeleteMangaList(MangaList instance);
    partial void InsertPublisher(Publisher instance);
    partial void UpdatePublisher(Publisher instance);
    partial void DeletePublisher(Publisher instance);
    partial void InsertSerialType(SerialType instance);
    partial void UpdateSerialType(SerialType instance);
    partial void DeleteSerialType(SerialType instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStudio(Studio instance);
    partial void UpdateStudio(Studio instance);
    partial void DeleteStudio(Studio instance);
    partial void InsertUserLog(UserLog instance);
    partial void UpdateUserLog(UserLog instance);
    partial void DeleteUserLog(UserLog instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserStatus(UserStatus instance);
    partial void UpdateUserStatus(UserStatus instance);
    partial void DeleteUserStatus(UserStatus instance);
    #endregion
		
		public AnimeDataContext() : 
				base(global::AniMaIndex.Properties.Settings.Default.AniMaIndexConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public AnimeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnimeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnimeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnimeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Anime> Animes
		{
			get
			{
				return this.GetTable<Anime>();
			}
		}
		
		public System.Data.Linq.Table<AiredYet> AiredYets
		{
			get
			{
				return this.GetTable<AiredYet>();
			}
		}
		
		public System.Data.Linq.Table<AnimeList> AnimeLists
		{
			get
			{
				return this.GetTable<AnimeList>();
			}
		}
		
		public System.Data.Linq.Table<FavAnime> FavAnimes
		{
			get
			{
				return this.GetTable<FavAnime>();
			}
		}
		
		public System.Data.Linq.Table<FavManga> FavMangas
		{
			get
			{
				return this.GetTable<FavManga>();
			}
		}
		
		public System.Data.Linq.Table<FavStaff> FavStaffs
		{
			get
			{
				return this.GetTable<FavStaff>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Manga> Mangas
		{
			get
			{
				return this.GetTable<Manga>();
			}
		}
		
		public System.Data.Linq.Table<MangaList> MangaLists
		{
			get
			{
				return this.GetTable<MangaList>();
			}
		}
		
		public System.Data.Linq.Table<Publisher> Publishers
		{
			get
			{
				return this.GetTable<Publisher>();
			}
		}
		
		public System.Data.Linq.Table<SerialType> SerialTypes
		{
			get
			{
				return this.GetTable<SerialType>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Studio> Studios
		{
			get
			{
				return this.GetTable<Studio>();
			}
		}
		
		public System.Data.Linq.Table<UserLog> UserLogs
		{
			get
			{
				return this.GetTable<UserLog>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserStatus> UserStatus
		{
			get
			{
				return this.GetTable<UserStatus>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Anime")]
	public partial class Anime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TitleID;
		
		private System.Nullable<int> _MangaID;
		
		private System.Nullable<int> _StudioID;
		
		private System.Nullable<int> _AniYear;
		
		private string _TitleName;
		
		private System.Nullable<int> _SerialTypeID;
		
		private System.Nullable<int> _GenreID;
		
		private string _ShortDescription;
		
		private decimal _Episodes;
		
		private System.Nullable<int> _AiredID;
		
		private EntitySet<AnimeList> _AnimeLists;
		
		private EntitySet<FavAnime> _FavAnimes;
		
		private EntitySet<Staff> _Staffs;
		
		private EntityRef<AiredYet> _AiredYet;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Manga> _Manga;
		
		private EntityRef<SerialType> _SerialType;
		
		private EntityRef<Studio> _Studio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleIDChanging(int value);
    partial void OnTitleIDChanged();
    partial void OnMangaIDChanging(System.Nullable<int> value);
    partial void OnMangaIDChanged();
    partial void OnStudioIDChanging(System.Nullable<int> value);
    partial void OnStudioIDChanged();
    partial void OnAniYearChanging(System.Nullable<int> value);
    partial void OnAniYearChanged();
    partial void OnTitleNameChanging(string value);
    partial void OnTitleNameChanged();
    partial void OnSerialTypeIDChanging(System.Nullable<int> value);
    partial void OnSerialTypeIDChanged();
    partial void OnGenreIDChanging(System.Nullable<int> value);
    partial void OnGenreIDChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnEpisodesChanging(decimal value);
    partial void OnEpisodesChanged();
    partial void OnAiredIDChanging(System.Nullable<int> value);
    partial void OnAiredIDChanged();
    #endregion
		
		public Anime()
		{
			this._AnimeLists = new EntitySet<AnimeList>(new Action<AnimeList>(this.attach_AnimeLists), new Action<AnimeList>(this.detach_AnimeLists));
			this._FavAnimes = new EntitySet<FavAnime>(new Action<FavAnime>(this.attach_FavAnimes), new Action<FavAnime>(this.detach_FavAnimes));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._AiredYet = default(EntityRef<AiredYet>);
			this._Genre = default(EntityRef<Genre>);
			this._Manga = default(EntityRef<Manga>);
			this._SerialType = default(EntityRef<SerialType>);
			this._Studio = default(EntityRef<Studio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaID", DbType="Int")]
		public System.Nullable<int> MangaID
		{
			get
			{
				return this._MangaID;
			}
			set
			{
				if ((this._MangaID != value))
				{
					if (this._Manga.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMangaIDChanging(value);
					this.SendPropertyChanging();
					this._MangaID = value;
					this.SendPropertyChanged("MangaID");
					this.OnMangaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudioID", DbType="Int")]
		public System.Nullable<int> StudioID
		{
			get
			{
				return this._StudioID;
			}
			set
			{
				if ((this._StudioID != value))
				{
					if (this._Studio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudioIDChanging(value);
					this.SendPropertyChanging();
					this._StudioID = value;
					this.SendPropertyChanged("StudioID");
					this.OnStudioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AniYear", DbType="Int")]
		public System.Nullable<int> AniYear
		{
			get
			{
				return this._AniYear;
			}
			set
			{
				if ((this._AniYear != value))
				{
					this.OnAniYearChanging(value);
					this.SendPropertyChanging();
					this._AniYear = value;
					this.SendPropertyChanged("AniYear");
					this.OnAniYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TitleName
		{
			get
			{
				return this._TitleName;
			}
			set
			{
				if ((this._TitleName != value))
				{
					this.OnTitleNameChanging(value);
					this.SendPropertyChanging();
					this._TitleName = value;
					this.SendPropertyChanged("TitleName");
					this.OnTitleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialTypeID", DbType="Int")]
		public System.Nullable<int> SerialTypeID
		{
			get
			{
				return this._SerialTypeID;
			}
			set
			{
				if ((this._SerialTypeID != value))
				{
					if (this._SerialType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSerialTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SerialTypeID = value;
					this.SendPropertyChanged("SerialTypeID");
					this.OnSerialTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int")]
		public System.Nullable<int> GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Episodes", DbType="Decimal(4,0) NOT NULL")]
		public decimal Episodes
		{
			get
			{
				return this._Episodes;
			}
			set
			{
				if ((this._Episodes != value))
				{
					this.OnEpisodesChanging(value);
					this.SendPropertyChanging();
					this._Episodes = value;
					this.SendPropertyChanged("Episodes");
					this.OnEpisodesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AiredID", DbType="Int")]
		public System.Nullable<int> AiredID
		{
			get
			{
				return this._AiredID;
			}
			set
			{
				if ((this._AiredID != value))
				{
					if (this._AiredYet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAiredIDChanging(value);
					this.SendPropertyChanging();
					this._AiredID = value;
					this.SendPropertyChanged("AiredID");
					this.OnAiredIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Anime_AnimeList", Storage="_AnimeLists", ThisKey="TitleID", OtherKey="TitleID")]
		public EntitySet<AnimeList> AnimeLists
		{
			get
			{
				return this._AnimeLists;
			}
			set
			{
				this._AnimeLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Anime_FavAnime", Storage="_FavAnimes", ThisKey="TitleID", OtherKey="TitleID")]
		public EntitySet<FavAnime> FavAnimes
		{
			get
			{
				return this._FavAnimes;
			}
			set
			{
				this._FavAnimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Anime_Staff", Storage="_Staffs", ThisKey="TitleID", OtherKey="TitleID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AiredYet_Anime", Storage="_AiredYet", ThisKey="AiredID", OtherKey="AiredID", IsForeignKey=true, DeleteRule="CASCADE")]
		public AiredYet AiredYet
		{
			get
			{
				return this._AiredYet.Entity;
			}
			set
			{
				AiredYet previousValue = this._AiredYet.Entity;
				if (((previousValue != value) 
							|| (this._AiredYet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AiredYet.Entity = null;
						previousValue.Animes.Remove(this);
					}
					this._AiredYet.Entity = value;
					if ((value != null))
					{
						value.Animes.Add(this);
						this._AiredID = value.AiredID;
					}
					else
					{
						this._AiredID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AiredYet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Anime", Storage="_Genre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Animes.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Animes.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_Anime", Storage="_Manga", ThisKey="MangaID", OtherKey="MangaID", IsForeignKey=true)]
		public Manga Manga
		{
			get
			{
				return this._Manga.Entity;
			}
			set
			{
				Manga previousValue = this._Manga.Entity;
				if (((previousValue != value) 
							|| (this._Manga.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manga.Entity = null;
						previousValue.Animes.Remove(this);
					}
					this._Manga.Entity = value;
					if ((value != null))
					{
						value.Animes.Add(this);
						this._MangaID = value.MangaID;
					}
					else
					{
						this._MangaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Manga");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SerialType_Anime", Storage="_SerialType", ThisKey="SerialTypeID", OtherKey="SerialTypeID", IsForeignKey=true, DeleteRule="CASCADE")]
		public SerialType SerialType
		{
			get
			{
				return this._SerialType.Entity;
			}
			set
			{
				SerialType previousValue = this._SerialType.Entity;
				if (((previousValue != value) 
							|| (this._SerialType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SerialType.Entity = null;
						previousValue.Animes.Remove(this);
					}
					this._SerialType.Entity = value;
					if ((value != null))
					{
						value.Animes.Add(this);
						this._SerialTypeID = value.SerialTypeID;
					}
					else
					{
						this._SerialTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SerialType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studio_Anime", Storage="_Studio", ThisKey="StudioID", OtherKey="StudioID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Studio Studio
		{
			get
			{
				return this._Studio.Entity;
			}
			set
			{
				Studio previousValue = this._Studio.Entity;
				if (((previousValue != value) 
							|| (this._Studio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studio.Entity = null;
						previousValue.Animes.Remove(this);
					}
					this._Studio.Entity = value;
					if ((value != null))
					{
						value.Animes.Add(this);
						this._StudioID = value.StudioID;
					}
					else
					{
						this._StudioID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Studio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimeLists(AnimeList entity)
		{
			this.SendPropertyChanging();
			entity.Anime = this;
		}
		
		private void detach_AnimeLists(AnimeList entity)
		{
			this.SendPropertyChanging();
			entity.Anime = null;
		}
		
		private void attach_FavAnimes(FavAnime entity)
		{
			this.SendPropertyChanging();
			entity.Anime = this;
		}
		
		private void detach_FavAnimes(FavAnime entity)
		{
			this.SendPropertyChanging();
			entity.Anime = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Anime = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Anime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AiredYet")]
	public partial class AiredYet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AiredID;
		
		private string _AiredName;
		
		private EntitySet<Anime> _Animes;
		
		private EntitySet<Manga> _Mangas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAiredIDChanging(int value);
    partial void OnAiredIDChanged();
    partial void OnAiredNameChanging(string value);
    partial void OnAiredNameChanged();
    #endregion
		
		public AiredYet()
		{
			this._Animes = new EntitySet<Anime>(new Action<Anime>(this.attach_Animes), new Action<Anime>(this.detach_Animes));
			this._Mangas = new EntitySet<Manga>(new Action<Manga>(this.attach_Mangas), new Action<Manga>(this.detach_Mangas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AiredID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AiredID
		{
			get
			{
				return this._AiredID;
			}
			set
			{
				if ((this._AiredID != value))
				{
					this.OnAiredIDChanging(value);
					this.SendPropertyChanging();
					this._AiredID = value;
					this.SendPropertyChanged("AiredID");
					this.OnAiredIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AiredName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AiredName
		{
			get
			{
				return this._AiredName;
			}
			set
			{
				if ((this._AiredName != value))
				{
					this.OnAiredNameChanging(value);
					this.SendPropertyChanging();
					this._AiredName = value;
					this.SendPropertyChanged("AiredName");
					this.OnAiredNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AiredYet_Anime", Storage="_Animes", ThisKey="AiredID", OtherKey="AiredID")]
		public EntitySet<Anime> Animes
		{
			get
			{
				return this._Animes;
			}
			set
			{
				this._Animes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AiredYet_Manga", Storage="_Mangas", ThisKey="AiredID", OtherKey="AiredID")]
		public EntitySet<Manga> Mangas
		{
			get
			{
				return this._Mangas;
			}
			set
			{
				this._Mangas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.AiredYet = this;
		}
		
		private void detach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.AiredYet = null;
		}
		
		private void attach_Mangas(Manga entity)
		{
			this.SendPropertyChanging();
			entity.AiredYet = this;
		}
		
		private void detach_Mangas(Manga entity)
		{
			this.SendPropertyChanging();
			entity.AiredYet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimeList")]
	public partial class AnimeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ListID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _TitleID;
		
		private System.Nullable<int> _Score;
		
		private System.Nullable<int> _StatusID;
		
		private System.Nullable<int> _EpsWatched;
		
		private EntityRef<Anime> _Anime;
		
		private EntityRef<User> _User;
		
		private EntityRef<UserStatus> _UserStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnListIDChanging(int value);
    partial void OnListIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnTitleIDChanging(System.Nullable<int> value);
    partial void OnTitleIDChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    partial void OnEpsWatchedChanging(System.Nullable<int> value);
    partial void OnEpsWatchedChanged();
    #endregion
		
		public AnimeList()
		{
			this._Anime = default(EntityRef<Anime>);
			this._User = default(EntityRef<User>);
			this._UserStatus = default(EntityRef<UserStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ListID
		{
			get
			{
				return this._ListID;
			}
			set
			{
				if ((this._ListID != value))
				{
					this.OnListIDChanging(value);
					this.SendPropertyChanging();
					this._ListID = value;
					this.SendPropertyChanged("ListID");
					this.OnListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int")]
		public System.Nullable<int> TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					if (this._Anime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._UserStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EpsWatched", DbType="Int")]
		public System.Nullable<int> EpsWatched
		{
			get
			{
				return this._EpsWatched;
			}
			set
			{
				if ((this._EpsWatched != value))
				{
					this.OnEpsWatchedChanging(value);
					this.SendPropertyChanging();
					this._EpsWatched = value;
					this.SendPropertyChanged("EpsWatched");
					this.OnEpsWatchedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Anime_AnimeList", Storage="_Anime", ThisKey="TitleID", OtherKey="TitleID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Anime Anime
		{
			get
			{
				return this._Anime.Entity;
			}
			set
			{
				Anime previousValue = this._Anime.Entity;
				if (((previousValue != value) 
							|| (this._Anime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Anime.Entity = null;
						previousValue.AnimeLists.Remove(this);
					}
					this._Anime.Entity = value;
					if ((value != null))
					{
						value.AnimeLists.Add(this);
						this._TitleID = value.TitleID;
					}
					else
					{
						this._TitleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Anime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AnimeList", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AnimeLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AnimeLists.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatus_AnimeList", Storage="_UserStatus", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true, DeleteRule="CASCADE")]
		public UserStatus UserStatus
		{
			get
			{
				return this._UserStatus.Entity;
			}
			set
			{
				UserStatus previousValue = this._UserStatus.Entity;
				if (((previousValue != value) 
							|| (this._UserStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStatus.Entity = null;
						previousValue.AnimeLists.Remove(this);
					}
					this._UserStatus.Entity = value;
					if ((value != null))
					{
						value.AnimeLists.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavAnime")]
	public partial class FavAnime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FavAnimeID;
		
		private System.Nullable<int> _TitleID;
		
		private System.Nullable<int> _UserID;
		
		private EntityRef<Anime> _Anime;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavAnimeIDChanging(int value);
    partial void OnFavAnimeIDChanged();
    partial void OnTitleIDChanging(System.Nullable<int> value);
    partial void OnTitleIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public FavAnime()
		{
			this._Anime = default(EntityRef<Anime>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavAnimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FavAnimeID
		{
			get
			{
				return this._FavAnimeID;
			}
			set
			{
				if ((this._FavAnimeID != value))
				{
					this.OnFavAnimeIDChanging(value);
					this.SendPropertyChanging();
					this._FavAnimeID = value;
					this.SendPropertyChanged("FavAnimeID");
					this.OnFavAnimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int")]
		public System.Nullable<int> TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					if (this._Anime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Anime_FavAnime", Storage="_Anime", ThisKey="TitleID", OtherKey="TitleID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Anime Anime
		{
			get
			{
				return this._Anime.Entity;
			}
			set
			{
				Anime previousValue = this._Anime.Entity;
				if (((previousValue != value) 
							|| (this._Anime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Anime.Entity = null;
						previousValue.FavAnimes.Remove(this);
					}
					this._Anime.Entity = value;
					if ((value != null))
					{
						value.FavAnimes.Add(this);
						this._TitleID = value.TitleID;
					}
					else
					{
						this._TitleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Anime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FavAnime", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FavAnimes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FavAnimes.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavManga")]
	public partial class FavManga : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FavMangaID;
		
		private System.Nullable<int> _MangaID;
		
		private System.Nullable<int> _UserID;
		
		private EntityRef<Manga> _Manga;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavMangaIDChanging(int value);
    partial void OnFavMangaIDChanged();
    partial void OnMangaIDChanging(System.Nullable<int> value);
    partial void OnMangaIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public FavManga()
		{
			this._Manga = default(EntityRef<Manga>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavMangaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FavMangaID
		{
			get
			{
				return this._FavMangaID;
			}
			set
			{
				if ((this._FavMangaID != value))
				{
					this.OnFavMangaIDChanging(value);
					this.SendPropertyChanging();
					this._FavMangaID = value;
					this.SendPropertyChanged("FavMangaID");
					this.OnFavMangaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaID", DbType="Int")]
		public System.Nullable<int> MangaID
		{
			get
			{
				return this._MangaID;
			}
			set
			{
				if ((this._MangaID != value))
				{
					if (this._Manga.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMangaIDChanging(value);
					this.SendPropertyChanging();
					this._MangaID = value;
					this.SendPropertyChanged("MangaID");
					this.OnMangaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_FavManga", Storage="_Manga", ThisKey="MangaID", OtherKey="MangaID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Manga Manga
		{
			get
			{
				return this._Manga.Entity;
			}
			set
			{
				Manga previousValue = this._Manga.Entity;
				if (((previousValue != value) 
							|| (this._Manga.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manga.Entity = null;
						previousValue.FavMangas.Remove(this);
					}
					this._Manga.Entity = value;
					if ((value != null))
					{
						value.FavMangas.Add(this);
						this._MangaID = value.MangaID;
					}
					else
					{
						this._MangaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Manga");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FavManga", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FavMangas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FavMangas.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavStaff")]
	public partial class FavStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FavStaffID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _StaffID;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavStaffIDChanging(int value);
    partial void OnFavStaffIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnStaffIDChanging(System.Nullable<int> value);
    partial void OnStaffIDChanged();
    #endregion
		
		public FavStaff()
		{
			this._Staff = default(EntityRef<Staff>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavStaffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FavStaffID
		{
			get
			{
				return this._FavStaffID;
			}
			set
			{
				if ((this._FavStaffID != value))
				{
					this.OnFavStaffIDChanging(value);
					this.SendPropertyChanging();
					this._FavStaffID = value;
					this.SendPropertyChanged("FavStaffID");
					this.OnFavStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int")]
		public System.Nullable<int> StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FavStaff", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.FavStaffs.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.FavStaffs.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FavStaff", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FavStaffs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FavStaffs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genres")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreID;
		
		private string _GenreName;
		
		private EntitySet<Anime> _Animes;
		
		private EntitySet<Manga> _Mangas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnGenreNameChanging(string value);
    partial void OnGenreNameChanged();
    #endregion
		
		public Genre()
		{
			this._Animes = new EntitySet<Anime>(new Action<Anime>(this.attach_Animes), new Action<Anime>(this.detach_Animes));
			this._Mangas = new EntitySet<Manga>(new Action<Manga>(this.attach_Mangas), new Action<Manga>(this.detach_Mangas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GenreName
		{
			get
			{
				return this._GenreName;
			}
			set
			{
				if ((this._GenreName != value))
				{
					this.OnGenreNameChanging(value);
					this.SendPropertyChanging();
					this._GenreName = value;
					this.SendPropertyChanged("GenreName");
					this.OnGenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Anime", Storage="_Animes", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<Anime> Animes
		{
			get
			{
				return this._Animes;
			}
			set
			{
				this._Animes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Manga", Storage="_Mangas", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<Manga> Mangas
		{
			get
			{
				return this._Mangas;
			}
			set
			{
				this._Mangas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
		
		private void attach_Mangas(Manga entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Mangas(Manga entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manga")]
	public partial class Manga : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MangaID;
		
		private System.Nullable<int> _PublisherID;
		
		private System.Nullable<int> _MangaYear;
		
		private string _MangaName;
		
		private string _ShortDescription;
		
		private decimal _Chapters;
		
		private decimal _Thomes;
		
		private System.Nullable<int> _AiredID;
		
		private System.Nullable<int> _GenreID;
		
		private EntitySet<Anime> _Animes;
		
		private EntitySet<FavManga> _FavMangas;
		
		private EntitySet<MangaList> _MangaLists;
		
		private EntitySet<Staff> _Staffs;
		
		private EntityRef<AiredYet> _AiredYet;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Publisher> _Publisher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMangaIDChanging(int value);
    partial void OnMangaIDChanged();
    partial void OnPublisherIDChanging(System.Nullable<int> value);
    partial void OnPublisherIDChanged();
    partial void OnMangaYearChanging(System.Nullable<int> value);
    partial void OnMangaYearChanged();
    partial void OnMangaNameChanging(string value);
    partial void OnMangaNameChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnChaptersChanging(decimal value);
    partial void OnChaptersChanged();
    partial void OnThomesChanging(decimal value);
    partial void OnThomesChanged();
    partial void OnAiredIDChanging(System.Nullable<int> value);
    partial void OnAiredIDChanged();
    partial void OnGenreIDChanging(System.Nullable<int> value);
    partial void OnGenreIDChanged();
    #endregion
		
		public Manga()
		{
			this._Animes = new EntitySet<Anime>(new Action<Anime>(this.attach_Animes), new Action<Anime>(this.detach_Animes));
			this._FavMangas = new EntitySet<FavManga>(new Action<FavManga>(this.attach_FavMangas), new Action<FavManga>(this.detach_FavMangas));
			this._MangaLists = new EntitySet<MangaList>(new Action<MangaList>(this.attach_MangaLists), new Action<MangaList>(this.detach_MangaLists));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._AiredYet = default(EntityRef<AiredYet>);
			this._Genre = default(EntityRef<Genre>);
			this._Publisher = default(EntityRef<Publisher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MangaID
		{
			get
			{
				return this._MangaID;
			}
			set
			{
				if ((this._MangaID != value))
				{
					this.OnMangaIDChanging(value);
					this.SendPropertyChanging();
					this._MangaID = value;
					this.SendPropertyChanged("MangaID");
					this.OnMangaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", DbType="Int")]
		public System.Nullable<int> PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					if (this._Publisher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaYear", DbType="Int")]
		public System.Nullable<int> MangaYear
		{
			get
			{
				return this._MangaYear;
			}
			set
			{
				if ((this._MangaYear != value))
				{
					this.OnMangaYearChanging(value);
					this.SendPropertyChanging();
					this._MangaYear = value;
					this.SendPropertyChanged("MangaYear");
					this.OnMangaYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MangaName
		{
			get
			{
				return this._MangaName;
			}
			set
			{
				if ((this._MangaName != value))
				{
					this.OnMangaNameChanging(value);
					this.SendPropertyChanging();
					this._MangaName = value;
					this.SendPropertyChanged("MangaName");
					this.OnMangaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chapters", DbType="Decimal(4,0) NOT NULL")]
		public decimal Chapters
		{
			get
			{
				return this._Chapters;
			}
			set
			{
				if ((this._Chapters != value))
				{
					this.OnChaptersChanging(value);
					this.SendPropertyChanging();
					this._Chapters = value;
					this.SendPropertyChanged("Chapters");
					this.OnChaptersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thomes", DbType="Decimal(4,0) NOT NULL")]
		public decimal Thomes
		{
			get
			{
				return this._Thomes;
			}
			set
			{
				if ((this._Thomes != value))
				{
					this.OnThomesChanging(value);
					this.SendPropertyChanging();
					this._Thomes = value;
					this.SendPropertyChanged("Thomes");
					this.OnThomesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AiredID", DbType="Int")]
		public System.Nullable<int> AiredID
		{
			get
			{
				return this._AiredID;
			}
			set
			{
				if ((this._AiredID != value))
				{
					if (this._AiredYet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAiredIDChanging(value);
					this.SendPropertyChanging();
					this._AiredID = value;
					this.SendPropertyChanged("AiredID");
					this.OnAiredIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int")]
		public System.Nullable<int> GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_Anime", Storage="_Animes", ThisKey="MangaID", OtherKey="MangaID")]
		public EntitySet<Anime> Animes
		{
			get
			{
				return this._Animes;
			}
			set
			{
				this._Animes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_FavManga", Storage="_FavMangas", ThisKey="MangaID", OtherKey="MangaID")]
		public EntitySet<FavManga> FavMangas
		{
			get
			{
				return this._FavMangas;
			}
			set
			{
				this._FavMangas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_MangaList", Storage="_MangaLists", ThisKey="MangaID", OtherKey="MangaID")]
		public EntitySet<MangaList> MangaLists
		{
			get
			{
				return this._MangaLists;
			}
			set
			{
				this._MangaLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_Staff", Storage="_Staffs", ThisKey="MangaID", OtherKey="MangaID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AiredYet_Manga", Storage="_AiredYet", ThisKey="AiredID", OtherKey="AiredID", IsForeignKey=true, DeleteRule="CASCADE")]
		public AiredYet AiredYet
		{
			get
			{
				return this._AiredYet.Entity;
			}
			set
			{
				AiredYet previousValue = this._AiredYet.Entity;
				if (((previousValue != value) 
							|| (this._AiredYet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AiredYet.Entity = null;
						previousValue.Mangas.Remove(this);
					}
					this._AiredYet.Entity = value;
					if ((value != null))
					{
						value.Mangas.Add(this);
						this._AiredID = value.AiredID;
					}
					else
					{
						this._AiredID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AiredYet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Manga", Storage="_Genre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Mangas.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Mangas.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Manga", Storage="_Publisher", ThisKey="PublisherID", OtherKey="PublisherID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Publisher Publisher
		{
			get
			{
				return this._Publisher.Entity;
			}
			set
			{
				Publisher previousValue = this._Publisher.Entity;
				if (((previousValue != value) 
							|| (this._Publisher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publisher.Entity = null;
						previousValue.Mangas.Remove(this);
					}
					this._Publisher.Entity = value;
					if ((value != null))
					{
						value.Mangas.Add(this);
						this._PublisherID = value.PublisherID;
					}
					else
					{
						this._PublisherID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publisher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.Manga = this;
		}
		
		private void detach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.Manga = null;
		}
		
		private void attach_FavMangas(FavManga entity)
		{
			this.SendPropertyChanging();
			entity.Manga = this;
		}
		
		private void detach_FavMangas(FavManga entity)
		{
			this.SendPropertyChanging();
			entity.Manga = null;
		}
		
		private void attach_MangaLists(MangaList entity)
		{
			this.SendPropertyChanging();
			entity.Manga = this;
		}
		
		private void detach_MangaLists(MangaList entity)
		{
			this.SendPropertyChanging();
			entity.Manga = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Manga = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Manga = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MangaList")]
	public partial class MangaList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MangaListID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _MangaID;
		
		private System.Nullable<int> _Score;
		
		private System.Nullable<int> _ChaptersRead;
		
		private System.Nullable<int> _ThomesRead;
		
		private System.Nullable<int> _StatusID;
		
		private EntityRef<Manga> _Manga;
		
		private EntityRef<User> _User;
		
		private EntityRef<UserStatus> _UserStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMangaListIDChanging(int value);
    partial void OnMangaListIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnMangaIDChanging(System.Nullable<int> value);
    partial void OnMangaIDChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnChaptersReadChanging(System.Nullable<int> value);
    partial void OnChaptersReadChanged();
    partial void OnThomesReadChanging(System.Nullable<int> value);
    partial void OnThomesReadChanged();
    partial void OnStatusIDChanging(System.Nullable<int> value);
    partial void OnStatusIDChanged();
    #endregion
		
		public MangaList()
		{
			this._Manga = default(EntityRef<Manga>);
			this._User = default(EntityRef<User>);
			this._UserStatus = default(EntityRef<UserStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MangaListID
		{
			get
			{
				return this._MangaListID;
			}
			set
			{
				if ((this._MangaListID != value))
				{
					this.OnMangaListIDChanging(value);
					this.SendPropertyChanging();
					this._MangaListID = value;
					this.SendPropertyChanged("MangaListID");
					this.OnMangaListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaID", DbType="Int")]
		public System.Nullable<int> MangaID
		{
			get
			{
				return this._MangaID;
			}
			set
			{
				if ((this._MangaID != value))
				{
					if (this._Manga.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMangaIDChanging(value);
					this.SendPropertyChanging();
					this._MangaID = value;
					this.SendPropertyChanged("MangaID");
					this.OnMangaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChaptersRead", DbType="Int")]
		public System.Nullable<int> ChaptersRead
		{
			get
			{
				return this._ChaptersRead;
			}
			set
			{
				if ((this._ChaptersRead != value))
				{
					this.OnChaptersReadChanging(value);
					this.SendPropertyChanging();
					this._ChaptersRead = value;
					this.SendPropertyChanged("ChaptersRead");
					this.OnChaptersReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThomesRead", DbType="Int")]
		public System.Nullable<int> ThomesRead
		{
			get
			{
				return this._ThomesRead;
			}
			set
			{
				if ((this._ThomesRead != value))
				{
					this.OnThomesReadChanging(value);
					this.SendPropertyChanging();
					this._ThomesRead = value;
					this.SendPropertyChanged("ThomesRead");
					this.OnThomesReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int")]
		public System.Nullable<int> StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					if (this._UserStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_MangaList", Storage="_Manga", ThisKey="MangaID", OtherKey="MangaID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Manga Manga
		{
			get
			{
				return this._Manga.Entity;
			}
			set
			{
				Manga previousValue = this._Manga.Entity;
				if (((previousValue != value) 
							|| (this._Manga.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manga.Entity = null;
						previousValue.MangaLists.Remove(this);
					}
					this._Manga.Entity = value;
					if ((value != null))
					{
						value.MangaLists.Add(this);
						this._MangaID = value.MangaID;
					}
					else
					{
						this._MangaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Manga");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MangaList", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MangaLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MangaLists.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatus_MangaList", Storage="_UserStatus", ThisKey="StatusID", OtherKey="StatusID", IsForeignKey=true, DeleteRule="CASCADE")]
		public UserStatus UserStatus
		{
			get
			{
				return this._UserStatus.Entity;
			}
			set
			{
				UserStatus previousValue = this._UserStatus.Entity;
				if (((previousValue != value) 
							|| (this._UserStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserStatus.Entity = null;
						previousValue.MangaLists.Remove(this);
					}
					this._UserStatus.Entity = value;
					if ((value != null))
					{
						value.MangaLists.Add(this);
						this._StatusID = value.StatusID;
					}
					else
					{
						this._StatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publisher")]
	public partial class Publisher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PublisherID;
		
		private string _PublisherName;
		
		private string _PublisherPage;
		
		private EntitySet<Manga> _Mangas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublisherIDChanging(int value);
    partial void OnPublisherIDChanged();
    partial void OnPublisherNameChanging(string value);
    partial void OnPublisherNameChanged();
    partial void OnPublisherPageChanging(string value);
    partial void OnPublisherPageChanged();
    #endregion
		
		public Publisher()
		{
			this._Mangas = new EntitySet<Manga>(new Action<Manga>(this.attach_Mangas), new Action<Manga>(this.detach_Mangas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PublisherID
		{
			get
			{
				return this._PublisherID;
			}
			set
			{
				if ((this._PublisherID != value))
				{
					this.OnPublisherIDChanging(value);
					this.SendPropertyChanging();
					this._PublisherID = value;
					this.SendPropertyChanged("PublisherID");
					this.OnPublisherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PublisherName
		{
			get
			{
				return this._PublisherName;
			}
			set
			{
				if ((this._PublisherName != value))
				{
					this.OnPublisherNameChanging(value);
					this.SendPropertyChanging();
					this._PublisherName = value;
					this.SendPropertyChanged("PublisherName");
					this.OnPublisherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublisherPage", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PublisherPage
		{
			get
			{
				return this._PublisherPage;
			}
			set
			{
				if ((this._PublisherPage != value))
				{
					this.OnPublisherPageChanging(value);
					this.SendPropertyChanging();
					this._PublisherPage = value;
					this.SendPropertyChanged("PublisherPage");
					this.OnPublisherPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publisher_Manga", Storage="_Mangas", ThisKey="PublisherID", OtherKey="PublisherID")]
		public EntitySet<Manga> Mangas
		{
			get
			{
				return this._Mangas;
			}
			set
			{
				this._Mangas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mangas(Manga entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = this;
		}
		
		private void detach_Mangas(Manga entity)
		{
			this.SendPropertyChanging();
			entity.Publisher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SerialType")]
	public partial class SerialType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SerialTypeID;
		
		private string _SerialName;
		
		private EntitySet<Anime> _Animes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSerialTypeIDChanging(int value);
    partial void OnSerialTypeIDChanged();
    partial void OnSerialNameChanging(string value);
    partial void OnSerialNameChanged();
    #endregion
		
		public SerialType()
		{
			this._Animes = new EntitySet<Anime>(new Action<Anime>(this.attach_Animes), new Action<Anime>(this.detach_Animes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SerialTypeID
		{
			get
			{
				return this._SerialTypeID;
			}
			set
			{
				if ((this._SerialTypeID != value))
				{
					this.OnSerialTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SerialTypeID = value;
					this.SendPropertyChanged("SerialTypeID");
					this.OnSerialTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SerialName
		{
			get
			{
				return this._SerialName;
			}
			set
			{
				if ((this._SerialName != value))
				{
					this.OnSerialNameChanging(value);
					this.SendPropertyChanging();
					this._SerialName = value;
					this.SendPropertyChanged("SerialName");
					this.OnSerialNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SerialType_Anime", Storage="_Animes", ThisKey="SerialTypeID", OtherKey="SerialTypeID")]
		public EntitySet<Anime> Animes
		{
			get
			{
				return this._Animes;
			}
			set
			{
				this._Animes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.SerialType = this;
		}
		
		private void detach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.SerialType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffID;
		
		private System.Nullable<int> _TitleID;
		
		private System.Nullable<int> _MangaID;
		
		private string _StaffName;
		
		private string _Occupation;
		
		private string _PersonalPage;
		
		private EntitySet<FavStaff> _FavStaffs;
		
		private EntityRef<Manga> _Manga;
		
		private EntityRef<Anime> _Anime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(int value);
    partial void OnStaffIDChanged();
    partial void OnTitleIDChanging(System.Nullable<int> value);
    partial void OnTitleIDChanged();
    partial void OnMangaIDChanging(System.Nullable<int> value);
    partial void OnMangaIDChanged();
    partial void OnStaffNameChanging(string value);
    partial void OnStaffNameChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnPersonalPageChanging(string value);
    partial void OnPersonalPageChanged();
    #endregion
		
		public Staff()
		{
			this._FavStaffs = new EntitySet<FavStaff>(new Action<FavStaff>(this.attach_FavStaffs), new Action<FavStaff>(this.detach_FavStaffs));
			this._Manga = default(EntityRef<Manga>);
			this._Anime = default(EntityRef<Anime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="Int")]
		public System.Nullable<int> TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					if (this._Anime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MangaID", DbType="Int")]
		public System.Nullable<int> MangaID
		{
			get
			{
				return this._MangaID;
			}
			set
			{
				if ((this._MangaID != value))
				{
					if (this._Manga.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMangaIDChanging(value);
					this.SendPropertyChanging();
					this._MangaID = value;
					this.SendPropertyChanged("MangaID");
					this.OnMangaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this.OnStaffNameChanging(value);
					this.SendPropertyChanging();
					this._StaffName = value;
					this.SendPropertyChanged("StaffName");
					this.OnStaffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalPage", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PersonalPage
		{
			get
			{
				return this._PersonalPage;
			}
			set
			{
				if ((this._PersonalPage != value))
				{
					this.OnPersonalPageChanging(value);
					this.SendPropertyChanging();
					this._PersonalPage = value;
					this.SendPropertyChanged("PersonalPage");
					this.OnPersonalPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_FavStaff", Storage="_FavStaffs", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<FavStaff> FavStaffs
		{
			get
			{
				return this._FavStaffs;
			}
			set
			{
				this._FavStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manga_Staff", Storage="_Manga", ThisKey="MangaID", OtherKey="MangaID", IsForeignKey=true)]
		public Manga Manga
		{
			get
			{
				return this._Manga.Entity;
			}
			set
			{
				Manga previousValue = this._Manga.Entity;
				if (((previousValue != value) 
							|| (this._Manga.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manga.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Manga.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._MangaID = value.MangaID;
					}
					else
					{
						this._MangaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Manga");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Anime_Staff", Storage="_Anime", ThisKey="TitleID", OtherKey="TitleID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Anime Anime
		{
			get
			{
				return this._Anime.Entity;
			}
			set
			{
				Anime previousValue = this._Anime.Entity;
				if (((previousValue != value) 
							|| (this._Anime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Anime.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Anime.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._TitleID = value.TitleID;
					}
					else
					{
						this._TitleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Anime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FavStaffs(FavStaff entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_FavStaffs(FavStaff entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Studio")]
	public partial class Studio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudioID;
		
		private string _StudioName;
		
		private string _StudioPage;
		
		private EntitySet<Anime> _Animes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudioIDChanging(int value);
    partial void OnStudioIDChanged();
    partial void OnStudioNameChanging(string value);
    partial void OnStudioNameChanged();
    partial void OnStudioPageChanging(string value);
    partial void OnStudioPageChanged();
    #endregion
		
		public Studio()
		{
			this._Animes = new EntitySet<Anime>(new Action<Anime>(this.attach_Animes), new Action<Anime>(this.detach_Animes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudioID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudioID
		{
			get
			{
				return this._StudioID;
			}
			set
			{
				if ((this._StudioID != value))
				{
					this.OnStudioIDChanging(value);
					this.SendPropertyChanging();
					this._StudioID = value;
					this.SendPropertyChanged("StudioID");
					this.OnStudioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudioName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StudioName
		{
			get
			{
				return this._StudioName;
			}
			set
			{
				if ((this._StudioName != value))
				{
					this.OnStudioNameChanging(value);
					this.SendPropertyChanging();
					this._StudioName = value;
					this.SendPropertyChanged("StudioName");
					this.OnStudioNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudioPage", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StudioPage
		{
			get
			{
				return this._StudioPage;
			}
			set
			{
				if ((this._StudioPage != value))
				{
					this.OnStudioPageChanging(value);
					this.SendPropertyChanging();
					this._StudioPage = value;
					this.SendPropertyChanged("StudioPage");
					this.OnStudioPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studio_Anime", Storage="_Animes", ThisKey="StudioID", OtherKey="StudioID")]
		public EntitySet<Anime> Animes
		{
			get
			{
				return this._Animes;
			}
			set
			{
				this._Animes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.Studio = this;
		}
		
		private void detach_Animes(Anime entity)
		{
			this.SendPropertyChanging();
			entity.Studio = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLog")]
	public partial class UserLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserLogID;
		
		private System.Nullable<int> _UserID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserLogIDChanging(int value);
    partial void OnUserLogIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserLogID
		{
			get
			{
				return this._UserLogID;
			}
			set
			{
				if ((this._UserLogID != value))
				{
					this.OnUserLogIDChanging(value);
					this.SendPropertyChanging();
					this._UserLogID = value;
					this.SendPropertyChanged("UserLogID");
					this.OnUserLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLogs.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _NickName;
		
		private System.DateTime _Birthdate;
		
		private string _Gender;
		
		private EntitySet<AnimeList> _AnimeLists;
		
		private EntitySet<FavAnime> _FavAnimes;
		
		private EntitySet<FavManga> _FavMangas;
		
		private EntitySet<FavStaff> _FavStaffs;
		
		private EntitySet<MangaList> _MangaLists;
		
		private EntitySet<UserLog> _UserLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnBirthdateChanging(System.DateTime value);
    partial void OnBirthdateChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public User()
		{
			this._AnimeLists = new EntitySet<AnimeList>(new Action<AnimeList>(this.attach_AnimeLists), new Action<AnimeList>(this.detach_AnimeLists));
			this._FavAnimes = new EntitySet<FavAnime>(new Action<FavAnime>(this.attach_FavAnimes), new Action<FavAnime>(this.detach_FavAnimes));
			this._FavMangas = new EntitySet<FavManga>(new Action<FavManga>(this.attach_FavMangas), new Action<FavManga>(this.detach_FavMangas));
			this._FavStaffs = new EntitySet<FavStaff>(new Action<FavStaff>(this.attach_FavStaffs), new Action<FavStaff>(this.detach_FavStaffs));
			this._MangaLists = new EntitySet<MangaList>(new Action<MangaList>(this.attach_MangaLists), new Action<MangaList>(this.detach_MangaLists));
			this._UserLogs = new EntitySet<UserLog>(new Action<UserLog>(this.attach_UserLogs), new Action<UserLog>(this.detach_UserLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="Date NOT NULL")]
		public System.DateTime Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(6)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AnimeList", Storage="_AnimeLists", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<AnimeList> AnimeLists
		{
			get
			{
				return this._AnimeLists;
			}
			set
			{
				this._AnimeLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FavAnime", Storage="_FavAnimes", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<FavAnime> FavAnimes
		{
			get
			{
				return this._FavAnimes;
			}
			set
			{
				this._FavAnimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FavManga", Storage="_FavMangas", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<FavManga> FavMangas
		{
			get
			{
				return this._FavMangas;
			}
			set
			{
				this._FavMangas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FavStaff", Storage="_FavStaffs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<FavStaff> FavStaffs
		{
			get
			{
				return this._FavStaffs;
			}
			set
			{
				this._FavStaffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MangaList", Storage="_MangaLists", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<MangaList> MangaLists
		{
			get
			{
				return this._MangaLists;
			}
			set
			{
				this._MangaLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLog", Storage="_UserLogs", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserLog> UserLogs
		{
			get
			{
				return this._UserLogs;
			}
			set
			{
				this._UserLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimeLists(AnimeList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AnimeLists(AnimeList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FavAnimes(FavAnime entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FavAnimes(FavAnime entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FavMangas(FavManga entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FavMangas(FavManga entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FavStaffs(FavStaff entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FavStaffs(FavStaff entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MangaLists(MangaList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MangaLists(MangaList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLogs(UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserStatus")]
	public partial class UserStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _StatusName;
		
		private EntitySet<AnimeList> _AnimeLists;
		
		private EntitySet<MangaList> _MangaLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    #endregion
		
		public UserStatus()
		{
			this._AnimeLists = new EntitySet<AnimeList>(new Action<AnimeList>(this.attach_AnimeLists), new Action<AnimeList>(this.detach_AnimeLists));
			this._MangaLists = new EntitySet<MangaList>(new Action<MangaList>(this.attach_MangaLists), new Action<MangaList>(this.detach_MangaLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatus_AnimeList", Storage="_AnimeLists", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<AnimeList> AnimeLists
		{
			get
			{
				return this._AnimeLists;
			}
			set
			{
				this._AnimeLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserStatus_MangaList", Storage="_MangaLists", ThisKey="StatusID", OtherKey="StatusID")]
		public EntitySet<MangaList> MangaLists
		{
			get
			{
				return this._MangaLists;
			}
			set
			{
				this._MangaLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimeLists(AnimeList entity)
		{
			this.SendPropertyChanging();
			entity.UserStatus = this;
		}
		
		private void detach_AnimeLists(AnimeList entity)
		{
			this.SendPropertyChanging();
			entity.UserStatus = null;
		}
		
		private void attach_MangaLists(MangaList entity)
		{
			this.SendPropertyChanging();
			entity.UserStatus = this;
		}
		
		private void detach_MangaLists(MangaList entity)
		{
			this.SendPropertyChanging();
			entity.UserStatus = null;
		}
	}
}
#pragma warning restore 1591
